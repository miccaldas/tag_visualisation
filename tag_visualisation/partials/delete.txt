# DATABASE CALL FOR DELETION THAT ENABLES DELETING; ONE; MANY OR A RANGE OF ENTRIES
    ident = input("ID to delete? ")

    """
    Function that deletes one, several or
    range of entries in the 'bkmks' database.\n
    You can use its sole option, '--dlt' in the following form:\n
    1. Delete non sequential entries. Surround the ids with quotation
       marks and separate them with a comma:\n
       "dlt '435, 436'", for example.
    \n
    2. Delete sequential entries. Envelop first and last ids with quotation
       marks and separate them with a dash:\n
       "dlt '437'-'439'".\n
       You may include spaces, but they'll be deleted by the application.\n
    3. Delete single entry. Write the id surrounded by quotation marks:\n
       "dlt '66'"
    """


    # List declared here to avoid errors about being declared before assignment.
    split_lst = []
    if "," in ident:
    # When inputing id strings to delete as a sole string, as it is convenient, MySQL
    # creates an error, since it expects a tuple of strings in the query. First we have
    # to split the id's at the comma. Splitting with space or space + comma doesn't work.
    lst = dlt.split(",")
    # Splitting creates empty spaces inside the strings. This eliminates them.
    nlst = [i.strip() for i in lst]
    # Finally we turn the list to tuple, the desired format by MySQL.
    nt = tuple(nlst)
    query = f"DELETE FROM ****PUT DATABASE NAME HERE**** WHERE id IN {nt}"
    if "-" in ident:
        if " - " in ident:
            answers = ident.replace(" ", "")
            split_lst = answers.split("-")
        else:
            split_lst = ident.split("-")
        query = (
            f"DELETE FROM ****PUT DATABASE NAME HERE**** WHERE id BETWEEN {split_lst[0]} AND {split_lst[1]}"
        )
    if "," not in ident and "-" not in ident:
        query = f"DELETE FROM ****PUT DATABASE NAME HERE**** WHERE id = '{ident}'"

    try:
        conn = connect(host="localhost", user="mic", password="xxxx", database="****PUT DATABASE NAME HERE****")
        cur = conn.cursor()
        query
        cur.execute(query)
        conn.commit()
        conn.close()
    except Error as e:
        err_msg = "Error while connecting to db", e
        print("Error while connecting to db", e)
        if err_msg:
            return query, err_msg

    return query

